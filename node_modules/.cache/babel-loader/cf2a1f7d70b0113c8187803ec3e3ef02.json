{"ast":null,"code":"var _jsxFileName = \"/Users/crystallevy/carbontracker/src/CarbonDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useEffect, useState } from \"react\";\nimport Table from './Table';\nimport ControlledAccordions from './Accordion';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CarbonDisplay(props) {\n  _s();\n\n  const testdata = require('./Resources/testdata.json');\n\n  const results = useState(testdata['data']);\n  const [data, setData] = useState([]);\n  const columns = useMemo(() => [{\n    Header: \"date\",\n    accessor: \"date\"\n  }, {\n    Header: \"name\",\n    accessor: \"name\"\n  }, {\n    Header: \"Cost to the planet\",\n    accessor: \"impact\"\n  }]);\n  let axiosConfig = {\n    headers: {\n      'x-identity': 'test'\n    }\n  };\n  useEffect(() => {\n    (async () => {\n      await getEmissionsData();\n    })().catch(error => {\n      console.log(error);\n    });\n  }, []);\n\n  async function getEmissionsData() {\n    await axios.get('https://carbon-tracker-ec6o7ozhzq-uc.a.run.app/footprint', axiosConfig).then(response => {\n      console.log(response);\n      var holdData = {};\n      var values = [];\n      var g = {};\n      var data = response.data.data;\n\n      for (var i in data) {\n        Object.entries(data[i]).map((k, v) => {\n          console.log(k);\n          holdData['date'] = k[0];\n          holdData['values'] = k[1];\n        });\n        values.push(holdData);\n      }\n\n      setData(values);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tahmid's Carbon Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: Object.keys(data).map((k, v) => {\n        return /*#__PURE__*/_jsxDEV(ControlledAccordions, {\n          data: data[k]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CarbonDisplay, \"X4YN8r4P1M0HH6GPJcOix015d34=\");\n\n_c = CarbonDisplay;\nexport default CarbonDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"CarbonDisplay\");","map":{"version":3,"sources":["/Users/crystallevy/carbontracker/src/CarbonDisplay.js"],"names":["React","useMemo","useEffect","useState","Table","ControlledAccordions","axios","CarbonDisplay","props","testdata","require","results","data","setData","columns","Header","accessor","axiosConfig","headers","getEmissionsData","catch","error","console","log","get","then","response","holdData","values","g","i","Object","entries","map","k","v","push","keys"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,OAAf,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAkD,OAAlD;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,oBAAP,MAAiC,aAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA6B;AAAA;;AAC5B,QAAMC,QAAQ,GAAGC,OAAO,CAAC,2BAAD,CAAxB;;AACA,QAAMC,OAAO,GAAGR,QAAQ,CAACM,QAAQ,CAAC,MAAD,CAAT,CAAxB;AACA,QAAM,CAACG,IAAD,EAAMC,OAAN,IAAiBV,QAAQ,CAAC,EAAD,CAA/B;AAEA,QAAMW,OAAO,GAAGb,OAAO,CAAC,MAAI,CAC3B;AACCc,IAAAA,MAAM,EAAE,MADT;AAECC,IAAAA,QAAQ,EAAE;AAFX,GAD2B,EAIzB;AACDD,IAAAA,MAAM,EAAC,MADN;AAEDC,IAAAA,QAAQ,EAAC;AAFR,GAJyB,EAOzB;AACDD,IAAAA,MAAM,EAAE,oBADP;AAEDC,IAAAA,QAAQ,EAAC;AAFR,GAPyB,CAAL,CAAvB;AAaA,MAAIC,WAAW,GAAG;AACjBC,IAAAA,OAAO,EAAE;AACR,oBAAa;AADL;AADQ,GAAlB;AAMAhB,EAAAA,SAAS,CAAC,MAAM;AAEf,KAAC,YAAY;AACZ,YAAMiB,gBAAgB,EAAtB;AACA,KAFD,IAEKC,KAFL,CAEWC,KAAK,IAAI;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,KAJD;AAKA,GAPQ,EAOP,EAPO,CAAT;;AASA,iBAAeF,gBAAf,GAAiC;AAChC,UAAMb,KAAK,CAACkB,GAAN,CAAU,0DAAV,EAAsEP,WAAtE,EAAmFQ,IAAnF,CAAwFC,QAAQ,IAAI;AACzGJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,UAAIC,MAAM,GAAG,EAAb;AACA,UAAIC,CAAC,GAAG,EAAR;AACA,UAAIjB,IAAI,GAAGc,QAAQ,CAACd,IAAT,CAAcA,IAAzB;;AACA,WAAK,IAAIkB,CAAT,IAAclB,IAAd,EAAmB;AAClBmB,QAAAA,MAAM,CAACC,OAAP,CAAepB,IAAI,CAACkB,CAAD,CAAnB,EAAwBG,GAAxB,CAA4B,CAACC,CAAD,EAAGC,CAAH,KAAS;AACpCb,UAAAA,OAAO,CAACC,GAAR,CAAYW,CAAZ;AACAP,UAAAA,QAAQ,CAAC,MAAD,CAAR,GAAmBO,CAAC,CAAC,CAAD,CAApB;AACAP,UAAAA,QAAQ,CAAC,QAAD,CAAR,GAAqBO,CAAC,CAAC,CAAD,CAAtB;AAEA,SALD;AAMAN,QAAAA,MAAM,CAACQ,IAAP,CAAYT,QAAZ;AACA;;AACFd,MAAAA,OAAO,CAACe,MAAD,CAAP;AAGC,KAlBK,EAkBHR,KAlBG,CAkBGC,KAAK,IAAI;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,KApBK,CAAN;AAqBA;;AAGD,sBAAO;AAAA,4BAEN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFM,eAGN;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBAEEU,MAAM,CAACM,IAAP,CAAYzB,IAAZ,EAAkBqB,GAAlB,CAAsB,CAACC,CAAD,EAAGC,CAAH,KAAS;AAC7B,4BACE,QAAC,oBAAD;AAAsB,UAAA,IAAI,EAAIvB,IAAI,CAACsB,CAAD;AAAlC;AAAA;AAAA;AAAA;AAAA,gBADF;AAIC,OALH;AAFF;AAAA;AAAA;AAAA;AAAA,YAHM;AAAA,kBAAP;AAiBA;;GA3EQ3B,a;;KAAAA,a;AA6ET,eAAeA,aAAf","sourcesContent":["import React, {useMemo, useEffect, useState} from \"react\";\nimport Table from './Table';\nimport ControlledAccordions from './Accordion';\nimport axios from 'axios';\n\nfunction CarbonDisplay(props){\n\tconst testdata = require('./Resources/testdata.json');\n\tconst results = useState(testdata['data']);\n\tconst [data,setData] = useState([]);\n\n\tconst columns = useMemo(()=>[\n\t\t{\n\t\t\tHeader: \"date\",\n\t\t\taccessor: \"date\"\n\t\t},{\n\t\t\tHeader:\"name\",\n\t\t\taccessor:\"name\"\n\t\t},{\n\t\t\tHeader: \"Cost to the planet\",\n\t\t\taccessor:\"impact\"\n\t\t}\n\t])\n\n\tlet axiosConfig = {\n\t\theaders: {\n\t\t\t'x-identity':'test'\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\n\t\t(async () => {\n\t\t\tawait getEmissionsData();\n\t\t})().catch(error => {\n\t\t\tconsole.log(error);\n\t\t});\n\t},[]);\n\n\tasync function getEmissionsData(){\n\t\tawait axios.get('https://carbon-tracker-ec6o7ozhzq-uc.a.run.app/footprint', axiosConfig).then(response => {\n\t\t\tconsole.log(response);\n\t\t\tvar holdData = {};\n\t\t\tvar values = []\n\t\t\tvar g = {};\n\t\t\tvar data = response.data.data;\n\t\t\tfor (var i in data){\n\t\t\t\tObject.entries(data[i]).map((k,v) => {\n\t\t\t\t\tconsole.log(k);\n\t\t\t\t\tholdData['date'] = k[0];\n\t\t\t\t\tholdData['values'] = k[1];\n\t\t\t\t\t\n\t\t\t\t})\n\t\t\t\tvalues.push(holdData);\n\t\t\t}\n\t\tsetData(values);\n\t\t\t\n\n\t\t}).catch(error => {\n\t\t\tconsole.log(error);\n\t\t})\n\t}\n\n\n\treturn(<>\n\n\t\t<h1>Tahmid's Carbon Tracker</h1>\n\t\t<div className=\"container\">\n\t\t{\n    Object.keys(data).map((k,v) => {\n      return(\n        <ControlledAccordions data = {data[k]}/>\n        )\n        \n      })\n  }\n\t\t\n\n\t</div>\n\t</>)\n\t\n}\n\nexport default CarbonDisplay;"]},"metadata":{},"sourceType":"module"}