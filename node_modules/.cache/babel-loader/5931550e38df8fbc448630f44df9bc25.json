{"ast":null,"code":"var _jsxFileName = \"/Users/crystallevy/carbontracker/src/CarbonDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useEffect, useState } from \"react\";\nimport Table from './Table';\nimport ControlledAccordions from './Accordion';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CarbonDisplay(props) {\n  _s();\n\n  const testdata = require('./Resources/testdata.json');\n\n  const results = useState(testdata['data']);\n  const [data, setData] = useState([]);\n  const columns = useMemo(() => [{\n    Header: \"date\",\n    accessor: \"date\"\n  }, {\n    Header: \"name\",\n    accessor: \"name\"\n  }, {\n    Header: \"Cost to the planet\",\n    accessor: \"impact\"\n  }]);\n  let axiosConfig = {\n    headers: {\n      'x-identity': 'test'\n    }\n  };\n  useEffect(() => {\n    (async () => {\n      await getEmissionsData();\n    })().catch(error => {\n      console.log(error);\n    });\n  }, []);\n\n  async function getEmissionsData() {\n    await axios.get('https://carbon-tracker-ec6o7ozhzq-uc.a.run.app/footprint', axiosConfig).then(response => {\n      console.log(response);\n      setData(response);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tahmid's Carbon Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(ControlledAccordions, {\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        columns: columns,\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CarbonDisplay, \"X4YN8r4P1M0HH6GPJcOix015d34=\");\n\n_c = CarbonDisplay;\nexport default CarbonDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"CarbonDisplay\");","map":{"version":3,"sources":["/Users/crystallevy/carbontracker/src/CarbonDisplay.js"],"names":["React","useMemo","useEffect","useState","Table","ControlledAccordions","axios","CarbonDisplay","props","testdata","require","results","data","setData","columns","Header","accessor","axiosConfig","headers","getEmissionsData","catch","error","console","log","get","then","response"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,OAAf,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAkD,OAAlD;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,oBAAP,MAAiC,aAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA6B;AAAA;;AAC5B,QAAMC,QAAQ,GAAGC,OAAO,CAAC,2BAAD,CAAxB;;AACA,QAAMC,OAAO,GAAGR,QAAQ,CAACM,QAAQ,CAAC,MAAD,CAAT,CAAxB;AACA,QAAM,CAACG,IAAD,EAAMC,OAAN,IAAiBV,QAAQ,CAAC,EAAD,CAA/B;AAEA,QAAMW,OAAO,GAAGb,OAAO,CAAC,MAAI,CAC3B;AACCc,IAAAA,MAAM,EAAE,MADT;AAECC,IAAAA,QAAQ,EAAE;AAFX,GAD2B,EAIzB;AACDD,IAAAA,MAAM,EAAC,MADN;AAEDC,IAAAA,QAAQ,EAAC;AAFR,GAJyB,EAOzB;AACDD,IAAAA,MAAM,EAAE,oBADP;AAEDC,IAAAA,QAAQ,EAAC;AAFR,GAPyB,CAAL,CAAvB;AAYA,MAAIC,WAAW,GAAG;AACjBC,IAAAA,OAAO,EAAE;AACR,oBAAa;AADL;AADQ,GAAlB;AAKAhB,EAAAA,SAAS,CAAC,MAAM;AACf,KAAC,YAAY;AACZ,YAAMiB,gBAAgB,EAAtB;AACA,KAFD,IAEKC,KAFL,CAEWC,KAAK,IAAI;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,KAJD;AAKA,GANQ,EAMP,EANO,CAAT;;AAQA,iBAAeF,gBAAf,GAAiC;AAChC,UAAMb,KAAK,CAACkB,GAAN,CAAU,0DAAV,EAAsEP,WAAtE,EAAmFQ,IAAnF,CAAwFC,QAAQ,IAAI;AACzGJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACAb,MAAAA,OAAO,CAACa,QAAD,CAAP;AAEA,KAJK,EAIHN,KAJG,CAIGC,KAAK,IAAI;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,KANK,CAAN;AAOA;;AAGD,sBAAO;AAAA,4BAEN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFM,eAGN;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACA,QAAC,oBAAD;AAAsB,QAAA,IAAI,EAAIT;AAA9B;AAAA;AAAA;AAAA;AAAA,cADA,eAEA,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEE,OAAhB;AAAyB,QAAA,IAAI,EAAEF;AAA/B;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHM;AAAA,kBAAP;AASA;;GAlDQL,a;;KAAAA,a;AAoDT,eAAeA,aAAf","sourcesContent":["import React, {useMemo, useEffect, useState} from \"react\";\nimport Table from './Table';\nimport ControlledAccordions from './Accordion';\nimport axios from 'axios';\n\nfunction CarbonDisplay(props){\n\tconst testdata = require('./Resources/testdata.json');\n\tconst results = useState(testdata['data']);\n\tconst [data,setData] = useState([]);\n\n\tconst columns = useMemo(()=>[\n\t\t{\n\t\t\tHeader: \"date\",\n\t\t\taccessor: \"date\"\n\t\t},{\n\t\t\tHeader:\"name\",\n\t\t\taccessor:\"name\"\n\t\t},{\n\t\t\tHeader: \"Cost to the planet\",\n\t\t\taccessor:\"impact\"\n\t\t}\n\t\t])\n\tlet axiosConfig = {\n\t\theaders: {\n\t\t\t'x-identity':'test'\n\t\t}\n\t};\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tawait getEmissionsData();\n\t\t})().catch(error => {\n\t\t\tconsole.log(error);\n\t\t});\n\t},[]);\n\n\tasync function getEmissionsData(){\n\t\tawait axios.get('https://carbon-tracker-ec6o7ozhzq-uc.a.run.app/footprint', axiosConfig).then(response => {\n\t\t\tconsole.log(response);\n\t\t\tsetData(response);\n\n\t\t}).catch(error => {\n\t\t\tconsole.log(error);\n\t\t})\n\t}\n\n\n\treturn(<>\n\n\t\t<h1>Tahmid's Carbon Tracker</h1>\n\t\t<div className=\"container\">\n\t\t<ControlledAccordions data = {data}/>\n\t\t<Table columns={columns} data={data}/>\n\t</div>\n\t</>)\n\t\n}\n\nexport default CarbonDisplay;"]},"metadata":{},"sourceType":"module"}